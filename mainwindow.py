# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QLabel, QVBoxLayout, QWidget
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPixmap, QImage
import os
import cv2
import numpy as np
from natsort import natsorted
from corner_detection import display_and_find_corners, find_intrinsic
from augment_reality import show_word_on_board


class Ui_Form(object):
    def __init__(self):

        self.folder_path = None
        self.image_l_path = None
        self.image_r_path = None
        
        self.image_1_path = None
        self.image_2_path = None

        self.image_list = []
        self.image_undistorted = []
        self.current_image_index = 0
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_image) 

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1200, 700)

        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(80, 60, 161, 311))
        self.groupBox.setObjectName("groupBox")

        # Load folder button
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(30, 70, 101, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(lambda: self.addButtonClicked("folder"))

        # Load Image_L button
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(30, 140, 101, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda: self.addButtonClicked("image_l"))
        
        # Load Image_R button
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setGeometry(QtCore.QRect(30, 210, 101, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(lambda: self.addButtonClicked("image_r"))

        # Calibration group
        self.groupBox_2 = QtWidgets.QGroupBox(Form)
        self.groupBox_2.setGeometry(QtCore.QRect(290, 60, 161, 311))
        self.groupBox_2.setObjectName("groupBox_2")

        # 1.1 Finde corners
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_4.setGeometry(QtCore.QRect(30, 30, 91, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.run_display_images)

        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_5.setGeometry(QtCore.QRect(30, 60, 91, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.run_find_intrinsic)

        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox_2)
        self.groupBox_3.setGeometry(QtCore.QRect(20, 110, 120, 80))
        self.groupBox_3.setObjectName("groupBox_3")

        self.spinBox = QtWidgets.QSpinBox(self.groupBox_3)
        self.spinBox.setGeometry(QtCore.QRect(40, 20, 42, 22))
        self.spinBox.setObjectName("spinBox")
        self.spinBox.setRange(1, 15)


        self.pushButton_6 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_6.setGeometry(QtCore.QRect(10, 50, 91, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.run_find_extrinsic)
        
        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_7.setGeometry(QtCore.QRect(30, 210, 91, 23))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.run_find_distortion)

        self.pushButton_8 = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton_8.setGeometry(QtCore.QRect(30, 250, 91, 23))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(self.show_result)
        
        self.groupBox_4 = QtWidgets.QGroupBox(Form)
        self.groupBox_4.setGeometry(QtCore.QRect(500, 60, 201, 311))
        self.groupBox_4.setObjectName("groupBox_4")

        self.textEdit = QtWidgets.QTextEdit(self.groupBox_4)
        self.textEdit.setGeometry(QtCore.QRect(30, 40, 141, 31))
        self.textEdit.setObjectName("textEdit")

        self.pushButton_9 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_9.setGeometry(QtCore.QRect(30, 100, 141, 23))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.run_show_word_on_board)

        self.pushButton_10 = QtWidgets.QPushButton(self.groupBox_4)
        self.pushButton_10.setGeometry(QtCore.QRect(30, 140, 141, 23))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_10.clicked.connect(self.run_show_word_on_board_vertical)

        self.groupBox_5 = QtWidgets.QGroupBox(Form)
        self.groupBox_5.setGeometry(QtCore.QRect(750, 60, 201, 311))
        self.groupBox_5.setObjectName("groupBox_5")

        self.pushButton_11 = QtWidgets.QPushButton(self.groupBox_5)
        self.pushButton_11.setGeometry(QtCore.QRect(20, 110, 161, 41))
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_11.clicked.connect(self.run_stereo_Disparity_Map)

        self.groupBox_6 = QtWidgets.QGroupBox(Form)
        self.groupBox_6.setGeometry(QtCore.QRect(290, 400, 181, 161))
        self.groupBox_6.setObjectName("groupBox_6")

        self.pushButton_12 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_12.setGeometry(QtCore.QRect(30, 30, 121, 23))
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_12.clicked.connect(lambda: self.addButtonClicked("image1"))

        self.pushButton_13 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_13.setGeometry(QtCore.QRect(30, 60, 121, 23))
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_13.clicked.connect(lambda: self.addButtonClicked("image2"))

        self.pushButton_15 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_15.setGeometry(QtCore.QRect(30, 90, 121, 23))
        self.pushButton_15.setObjectName("pushButton_15")
        self.pushButton_15.clicked.connect(self.SFIT_KeyPoints)

        self.pushButton_16 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_16.setGeometry(QtCore.QRect(30, 120, 121, 23))
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_16.clicked.connect(self.Matched_KeyPoints)


        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.groupBox.setTitle(_translate("Form", "Load Image"))
        self.pushButton.setText(_translate("Form", "Load folder"))
        self.pushButton_2.setText(_translate("Form", "Load Image_L"))
        self.pushButton_3.setText(_translate("Form", "Load Image_R"))
        self.groupBox_2.setTitle(_translate("Form", "1.Calibration"))
        self.pushButton_4.setText(_translate("Form", "1.1 Find corners"))
        self.pushButton_5.setText(_translate("Form", "1.2 Find intrinsic"))
        self.groupBox_3.setTitle(_translate("Form", "1.3 Find extrinsic"))
        self.pushButton_6.setText(_translate("Form", "1.3 Find extrinsic"))
        self.pushButton_7.setText(_translate("Form", "1.4 Find distortion"))
        self.pushButton_8.setText(_translate("Form", "1.5 Show result"))
        self.groupBox_4.setTitle(_translate("Form", "2. Augmented Reality"))
        self.pushButton_9.setText(_translate("Form", "2.1 show words on board"))
        self.pushButton_10.setText(_translate("Form", "2.2 show words vertical"))
        self.groupBox_5.setTitle(_translate("Form", "3. Stereo disparity map"))
        self.pushButton_11.setText(_translate("Form", "3.1 stereo disparity map"))
        self.groupBox_6.setTitle(_translate("Form", "4.SIFT"))
        self.pushButton_12.setText(_translate("Form", "Load Image1"))
        self.pushButton_13.setText(_translate("Form", "Load Image2"))
        self.pushButton_15.setText(_translate("Form", "4.1 Keypoints"))
        self.pushButton_16.setText(_translate("Form", "4.2 Matched Keypoints"))
        # 在 Form 上新增 QLabel 來顯示選中的圖片
        """
        self.image_container1 = QWidget(Form)
        self.image_container1.setGeometry(QtCore.QRect(500, 400, 400, 300))  # 調整位置和大小
        self.image_layout1 = QVBoxLayout(self.image_container1)

        self.text_label1_1 = QLabel("Distored Image", self.image_container1)
        self.text_label1_1.setAlignment(Qt.AlignCenter)
        self.image_layout1.addWidget(self.text_label1_1)

        self.image_label = QLabel(self.image_container1)
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setText("Distored Image will appear here")
        self.image_label.setScaledContents(True) 
        self.image_layout1.addWidget(self.image_label)

        self.image_container2 = QWidget(Form)
        self.image_container2.setGeometry(QtCore.QRect(800, 400, 400, 300))  # 調整位置和大小
        self.image_layout2 = QVBoxLayout(self.image_container2)

        self.text_label2_1 = QLabel("Undistored Image", self.image_container2)
        self.text_label2_1.setAlignment(Qt.AlignCenter)
        self.image_layout2.addWidget(self.text_label2_1)

        self.image_label2 = QLabel(self.image_container2)
        self.image_label2.setAlignment(Qt.AlignCenter)
        self.image_label2.setText("Undistored Image will appear here")
        self.image_label2.setScaledContents(True)
        self.image_layout2.addWidget(self.image_label2)

        """
        self.image_label = QLabel(Form)
        self.image_label.setGeometry(QtCore.QRect(500, 400, 400, 300))  # 調整位置和大小
        self.image_label.setObjectName("image_label")
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setText("Distorted Image will appear here")
        self.image_label2 = QLabel(Form)
        self.image_label2.setGeometry(QtCore.QRect(800, 400, 400, 300))  # 調整位置和大小
        self.image_label2.setObjectName("image_label")
        self.image_label2.setAlignment(Qt.AlignCenter)
        self.image_label2.setText("Undistorted Image will appear here")

    
    def addButtonClicked(self, button_type):
        if button_type == "folder":
            folder_path = QFileDialog.getExistingDirectory(None, "Select Folder")
            if folder_path:
                self.folder_path = folder_path
                print(f"Selected folder: {folder_path}")

        elif button_type == "image_l":
            file_name, _ = QFileDialog.getOpenFileName(None, "Select Left Image", "", "Image Files (*.png *.jpg *.bmp)")
            if file_name:
                self.image_l_path = file_name
                print(f"Selected left image: {file_name}")
        
        elif button_type == "image_r":
            file_name, _ = QFileDialog.getOpenFileName(None, "Select Right Image", "", "Image Files (*.png *.jpg *.bmp)")
            if file_name:
                self.image_r_path = file_name
                print(f"Selected right image: {file_name}")
        
        elif button_type == "image1":
            file_name, _ = QFileDialog.getOpenFileName(None, "Select Image_1", "", "Image Files (*.png *.jpg *.bmp)")
            if file_name:
                self.image_1_path = file_name
                print(f"Selected image_1: {file_name}")

        elif button_type == "image2":
            file_name, _ = QFileDialog.getOpenFileName(None, "Select Image_2", "", "Image Files (*.png *.jpg *.bmp)")
            if file_name:
                self.image_2_path = file_name
                print(f"Selected image_2: {file_name}")
                

    def run_display_images(self):
        if self.folder_path:
            display_and_find_corners(self.folder_path)
        else:
            QMessageBox.warning(None, "Warning", "Pick the folder first")

    def run_find_intrinsic(self):
        if self.folder_path:
            ins, dist, rvecs, tvecs  = find_intrinsic(self.folder_path)
            if ins is not None:
                ins_str = '[[{0}]\n [{1}]\n [{2}]]'.format(
                    ' '.join([f"{item:.8e}" for item in ins[0]]),
                    ' '.join([f"{item:.8e}" for item in ins[1]]),
                    ' '.join([f"{item:.8e}" for item in ins[2]])
                )
                QMessageBox.information(None, "Intrinsic Matrix" ,f"(Intrinsic Matrix):\n{ins_str}")
        else:  
            QMessageBox.warning(None, "Warning", "Pick the folder first")
    
    def run_find_extrinsic(self):
        if self.folder_path:
            value = self.spinBox.value()-1
            ins, dist, rvecs, tvecs  = find_intrinsic(self.folder_path)
            rvec = rvecs[value]
            tvec = tvecs[value]
            rotation_matrix, _ = cv2.Rodrigues(rvec)
            extrinsic_matrix = np.hstack((rotation_matrix, tvec))

            ext_str = '[[{0}]\n [{1}]\n [{2}]]'.format(
                    ' '.join([f"{item:.8f}" for item in extrinsic_matrix[0]]),
                    ' '.join([f"{item:.8f}" for item in extrinsic_matrix[1]]),
                    ' '.join([f"{item:.8f}" for item in extrinsic_matrix[2]])
                )
            QMessageBox.information(None, "Extrinsic Matrix" ,f"(Extrinsic Matrix):\n{ext_str}")
        else:  
            QMessageBox.warning(None, "Warning", "Pick the folder first")

    def run_find_distortion(self):
        if self.folder_path:
            ins, dist, rvecs, tvecs  = find_intrinsic(self.folder_path)
            if dist is not None:
                dist_str = '[[{0}]]'.format(' '.join([f"{item:.8f}" for item in dist[0]]))
                QMessageBox.information(None, "Distortion Matrix" ,f"(Distortion Matrix):\n{dist_str}")
        else:  
            QMessageBox.warning(None, "Warning", "Pick the folder first")

    def show_result(self):
        if self.folder_path:
            # 收集資料夾中所有支持的圖片文件，並排序
            ins, dist, rvecs, tvecs  = find_intrinsic(self.folder_path)
            supported_formats = ('.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif')
            self.image_list = natsorted([
                os.path.join(self.folder_path, f)
                for f in os.listdir(self.folder_path)
                if f.lower().endswith(supported_formats)
            ])
            if not self.image_list:
                QMessageBox.warning(None, "Warning", "No images found in the folder.")
                return
            
            self.image_undistorted = []

            for image_path in self.image_list:
                image = cv2.imread(image_path)
                resized_image = cv2.resize(image, (2048, 2048), interpolation=cv2.INTER_AREA)
                grayimg = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)
                res_img = cv2.undistort(grayimg, ins ,dist)
                self.image_undistorted.append(res_img)

            self.current_image_index = 0  # 重置索引
            # 啟動定時器，每秒觸發一次
            self.timer.start(1000)  # 1000 毫秒 = 1 秒
        else:
            QMessageBox.warning(None, "Warning", "Please load the folder first.")

    def run_show_word_on_board(self):
        if self.folder_path:
            ins, dist, rvecs, tvecs  = show_word_on_board(self.folder_path)
            word = self.textEdit.toPlainText().strip()
            if len(word) == 0:
                QMessageBox.warning(None, "Warning", "Please Enter a word in the textEdit box.")
            if len(word) > 6:
                QMessageBox.warning(None, "Warning", "Please enter a word with less than or equal to 6 characters.")
                return
            if not word.isalpha() or not word.isascii():
                QMessageBox.warning(None, "Warning", "Please enter a valid English word (letters only).")
                return
            
            word = word.upper()

            fs = cv2.FileStorage(os.path.join(self.folder_path,'Q2_db', 'alphabet_db_onboard.txt'), cv2.FILE_STORAGE_READ)
            if not fs.isOpened():
                QMessageBox.critical(None, "Error", "Failed to open alphabet_db_onboard.txt.")
                return
            
            supported_formats = ('.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif')
            image_list = natsorted([
                os.path.join(self.folder_path, f)
                for f in os.listdir(self.folder_path)
                if f.lower().endswith(supported_formats)
            ])

            num_images = len(image_list)
            if num_images != 5:
                QMessageBox.warning(None, "Warning", f"Expected 5 images, found {num_images}. Proceeding with available images.")
            positions = [
                np.array([7 , 5 , 0.0]),  # 字符1的位置 (0.14, 0.10, 0.0)
                np.array([4 , 5 , 0.0]),  # 字符2的位置 (0.08, 0.10, 0.0)
                np.array([1 , 5 , 0.0]),  # 字符3的位置 (0.02, 0.10, 0.0)
                np.array([7 , 2 , 0.0]),  # 字符4的位置 (0.14, 0.04, 0.0)
                np.array([4 , 2 , 0.0]),  # 字符5的位置 (0.08, 0.04, 0.0)
                np.array([1 , 2 , 0.0])   # 字符6的位置 (0.02, 0.04, 0.0)
            ]

            #positions = positions[len(word)]


            for i, image_path in enumerate(image_list):
                image = cv2.imread(image_path)
                if image is None:
                    print(f"Failed to read image: {image_path}")
                    continue
                rvec = rvecs[i]
                tvec = tvecs[i]

                for idx, char in enumerate(word):
                    if idx >= len(positions):
                        print(f"No translation vector for character {char}. Skipping.")
                        continue
                    translation_vector = positions[idx]

                    node = fs.getNode(char)
                    if node.empty():
                        print(f"Character '{char}' not found in database.")
                        continue

                    charPoints = node.mat()
                    if charPoints is None:
                        print(f"No points data for character '{char}'.")
                        continue

                    charPoints = charPoints.reshape(-1, 3).astype(np.float64)
                    charPoints += translation_vector
                    charPoints *= 0.02

                    newCharPoints,_ = cv2.projectPoints(charPoints, rvec, tvec, ins, dist)

                    newCharPoints = newCharPoints.reshape(-1, 2).astype(int)



                    for j in range(0, len(newCharPoints), 2):
                        pt1 = tuple(newCharPoints[j])
                        pt2 = tuple(newCharPoints[j + 1])
                        cv2.line(image, pt1, pt2, color=(0, 0, 255), thickness=15)  # 紅色線條，厚度為 10






                    # print(f"Processing Character'{char}':")
                    # print(f"charPoint:{charPoints}")
                    # print(f"charPoint:{newCharPoints}")

                window_name = f"Image {i + 1}"
                cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)  # 允許調整窗口大小
                desired_width = 800
                desired_height = 600
                cv2.resizeWindow(window_name, desired_width, desired_height)
                cv2.imshow(window_name, image)
                key = cv2.waitKey(1000)  # 顯示1秒

                if key == 27:
                    break
                cv2.destroyAllWindows()
            fs.release()

            QMessageBox.information(None, "Info", "All images have been shown.")



        else:  
            QMessageBox.warning(None, "Warning", "Pick the folder first")

    def run_show_word_on_board_vertical(self):
        if self.folder_path:
            ins, dist, rvecs, tvecs  = show_word_on_board(self.folder_path)
            word = self.textEdit.toPlainText().strip()
            if len(word) == 0:
                QMessageBox.warning(None, "Warning", "Please Enter a word in the textEdit box.")
            if len(word) > 6:
                QMessageBox.warning(None, "Warning", "Please enter a word with less than or equal to 6 characters.")
                return
            if not word.isalpha() or not word.isascii():
                QMessageBox.warning(None, "Warning", "Please enter a valid English word (letters only).")
                return
            
            word = word.upper()

            fs = cv2.FileStorage(os.path.join(self.folder_path,'Q2_db', 'alphabet_db_vertical.txt'), cv2.FILE_STORAGE_READ)
            if not fs.isOpened():
                QMessageBox.critical(None, "Error", "Failed to open alphabet_db_vertical.txt.")
                return
            
            supported_formats = ('.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif')
            image_list = natsorted([
                os.path.join(self.folder_path, f)
                for f in os.listdir(self.folder_path)
                if f.lower().endswith(supported_formats)
            ])

            num_images = len(image_list)
            if num_images != 5:
                QMessageBox.warning(None, "Warning", f"Expected 5 images, found {num_images}. Proceeding with available images.")
            positions = [
                np.array([7 , 5 , 0.0]),  # 字符1的位置 (0.14, 0.10, 0.0)
                np.array([4 , 5 , 0.0]),  # 字符2的位置 (0.08, 0.10, 0.0)
                np.array([1 , 5 , 0.0]),  # 字符3的位置 (0.02, 0.10, 0.0)
                np.array([7 , 2 , 0.0]),  # 字符4的位置 (0.14, 0.04, 0.0)
                np.array([4 , 2 , 0.0]),  # 字符5的位置 (0.08, 0.04, 0.0)
                np.array([1 , 2 , 0.0])   # 字符6的位置 (0.02, 0.04, 0.0)
            ]

            #positions = positions[len(word)]


            for i, image_path in enumerate(image_list):
                image = cv2.imread(image_path)
                if image is None:
                    print(f"Failed to read image: {image_path}")
                    continue
                rvec = rvecs[i]
                tvec = tvecs[i]

                for idx, char in enumerate(word):
                    if idx >= len(positions):
                        print(f"No translation vector for character {char}. Skipping.")
                        continue
                    translation_vector = positions[idx]

                    node = fs.getNode(char)
                    if node.empty():
                        print(f"Character '{char}' not found in database.")
                        continue

                    charPoints = node.mat()
                    if charPoints is None:
                        print(f"No points data for character '{char}'.")
                        continue

                    charPoints = charPoints.reshape(-1, 3).astype(np.float64)
                    charPoints += translation_vector
                    charPoints *= 0.02

                    newCharPoints,_ = cv2.projectPoints(charPoints, rvec, tvec, ins, dist)

                    newCharPoints = newCharPoints.reshape(-1, 2).astype(int)



                    for j in range(0, len(newCharPoints), 2):
                        pt1 = tuple(newCharPoints[j])
                        pt2 = tuple(newCharPoints[j + 1])
                        cv2.line(image, pt1, pt2, color=(0, 0, 255), thickness=15)  # 紅色線條，厚度為 10






                    # print(f"Processing Character'{char}':")
                    # print(f"charPoint:{charPoints}")
                    # print(f"charPoint:{newCharPoints}")

                window_name = f"Image {i + 1}"
                cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)  # 允許調整窗口大小
                desired_width = 800
                desired_height = 600
                cv2.resizeWindow(window_name, desired_width, desired_height)
                cv2.imshow(window_name, image)
                key = cv2.waitKey(1000)  # 顯示1秒

                if key == 27:
                    break
                cv2.destroyAllWindows()
            fs.release()

            QMessageBox.information(None, "Info", "All images have been shown.")



        else:  
            QMessageBox.warning(None, "Warning", "Pick the folder first")

    def update_image(self):
        if self.current_image_index < len(self.image_list):
            image_path = self.image_list[self.current_image_index]
            uimage = self.image_undistorted[self.current_image_index] 
            height, width = uimage.shape
            bytes_per_line = width

            qimage = QImage(uimage.data, width, height, bytes_per_line, QImage.Format_Grayscale8)

            pixmap = QPixmap(image_path)
            pixmap2 = QPixmap(qimage)
            
            # 顯示在第一個 QLabel 上（例如原始圖像）
            self.image_label.setPixmap(
                pixmap.scaled(
                    self.image_label.size(),
                    Qt.KeepAspectRatio,
                    Qt.SmoothTransformation
                )
            )
            # 顯示在第二個 QLabel 上（例如去畸變後的圖像）
            # 如果有不同的處理，可以在這裡進行不同的處理
            # 目前僅顯示相同的圖像
            self.image_label2.setPixmap(
                pixmap2.scaled( 
                    self.image_label2.size(),
                    Qt.KeepAspectRatio,
                    Qt.SmoothTransformation
                )
            )
            
            print(f"Loaded image: {image_path}")
            self.current_image_index += 1
        else:
            # 所有圖片已顯示，停止定時器
            self.timer.stop()
            QMessageBox.information(None, "Info", "All images have been shown.")

    def run_stereo_Disparity_Map(self):
        if self.image_l_path and self.image_r_path:
            imgL = cv2.imread(self.image_l_path)
            imgR = cv2.imread(self.image_r_path)

            gray_imgL = cv2.cvtColor(imgL, cv2.COLOR_BGR2GRAY)
            gray_imgR = cv2.cvtColor(imgR, cv2.COLOR_BGR2GRAY)

            stereo = cv2.StereoBM.create(numDisparities=64,blockSize=27)
            disparity = stereo.compute(gray_imgL, gray_imgR)

            disparity_normalized = cv2.normalize(disparity, None, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX)
            disparity_normalized = np.uint8(disparity_normalized)

            #disparity_color = cv2.applyColorMap(disparity_normalized, cv2.COLORMAP_JET)

            window_name_l = "ImgL"
            window_name_r = "ImgR"
            window_name_disp = "Disparity Map"

            cv2.namedWindow(window_name_l, cv2.WINDOW_NORMAL)
            cv2.resizeWindow(window_name_l, 400, 400)
            cv2.imshow(window_name_l, imgL)

            cv2.namedWindow(window_name_r, cv2.WINDOW_NORMAL)
            cv2.resizeWindow(window_name_r, 400, 400)
            cv2.imshow(window_name_r, imgR)
            
            cv2.namedWindow(window_name_disp, cv2.WINDOW_NORMAL)
            cv2.resizeWindow(window_name_disp, 400, 400)
            cv2.imshow(window_name_disp, disparity_normalized)
            #cv2.imshow(window_name_disp, disparity_color)

            while True:
                key = cv2.waitKey(1) & 0xFF
                # 如果所有窗口都被關閉，則退出循環
                if cv2.getWindowProperty(window_name_l, cv2.WND_PROP_VISIBLE) < 1 and \
                   cv2.getWindowProperty(window_name_r, cv2.WND_PROP_VISIBLE) < 1 and \
                   cv2.getWindowProperty(window_name_disp, cv2.WND_PROP_VISIBLE) < 1:
                    break
                # 如果用戶按下 ESC 鍵，則退出循環
                if key == 27:
                    break

            # 清理所有窗口
            cv2.destroyAllWindows()
        else:  
            QMessageBox.warning(None, "Warning", "Pick two pictures first")

    def SFIT_KeyPoints(self):
        if self.image_1_path:
            img1 = cv2.imread(self.image_1_path)
            gray = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)

            sift = cv2.SIFT_create()
            
            keypoints, descriptors = sift.detectAndCompute(gray, None)

            img1 = cv2.drawKeypoints(gray, keypoints, None, color=(0,255,0))
            window_name_1 = "SIFT Keypoints on image1"

            cv2.namedWindow(window_name_1, cv2.WINDOW_NORMAL)
            cv2.resizeWindow(window_name_1, 400, 400)
            cv2.imshow(window_name_1, img1)

            while True:
                key = cv2.waitKey(1) & 0xFF
                # 如果所有窗口都被關閉，則退出循環
                if cv2.getWindowProperty(window_name_1, cv2.WND_PROP_VISIBLE) < 1:
                    break
                # 如果用戶按下 ESC 鍵，則退出循環
                if key == 27:
                    break

            # 清理所有窗口
            cv2.destroyAllWindows()


        else:  
            QMessageBox.warning(None, "Warning", "Load Image 1 first")
    def Matched_KeyPoints(self):
        if self.image_1_path and self.image_2_path:
            img1 = cv2.imread(self.image_1_path)
            img2 = cv2.imread(self.image_2_path)

            gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
            gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)

            sift = cv2.SIFT_create()

            
            keypoint1s, descriptor1s = sift.detectAndCompute(gray1, None)
            keypoint2s, descriptor2s = sift.detectAndCompute(gray2, None)

            matches = cv2.BFMatcher().knnMatch(descriptor1s, descriptor2s, k=2)
            good_matches = [[m] for m, n in matches if m.distance < 0.75 * n.distance]

            color_gray1 = cv2.cvtColor(gray1, cv2.COLOR_GRAY2BGR)
            color_gray2 = cv2.cvtColor(gray2, cv2.COLOR_GRAY2BGR)


            imgres = cv2.drawMatchesKnn(color_gray1, keypoint1s, color_gray2, keypoint2s, good_matches, None, flags=cv2.DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS)
            
            window_name_1 = "Matched KeyPoints "

            cv2.namedWindow(window_name_1, cv2.WINDOW_NORMAL)
            cv2.resizeWindow(window_name_1, 800, 400)
            cv2.imshow(window_name_1, imgres)

            while True:
                key = cv2.waitKey(1) & 0xFF
                # 如果所有窗口都被關閉，則退出循環
                if cv2.getWindowProperty(window_name_1, cv2.WND_PROP_VISIBLE) < 1:
                    break
                # 如果用戶按下 ESC 鍵，則退出循環
                if key == 27:
                    break

            # 清理所有窗口
            cv2.destroyAllWindows()


        else:  
            QMessageBox.warning(None, "Warning", "Load Image 1 and Image 2 first")
            



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())

